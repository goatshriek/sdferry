#ifndef __SDFERRY_REGISTER_H
#define __SDFERRY_REGISTER_H

#include <sdferry/memory.h>

/*
 * The SDFERRY_DECLARE_STRUCT macro function declares the functions that are
 * generated by the REGISTER_STRUCT functions. This should be placed into a
 * header that will be included in any source where SDFerry will be used.
 */

#define SDFERRY_DECLARE_STRUCT(NAME)                                           \
uint32_t __sdferry_send_##NAME(char *data, void *val, uint32_t buffer_size);   \
uint32_t __sdferry_receive_##NAME(char *data, void *val);                      \
uint32_t __sdferry_receive_##NAME##_struct(char *data, void *thing);           \
void *__sdferry_alloc_##NAME(void);                                            \
void __sdferry_free_##NAME(void *val);                                         \
void __sdferry_free_##NAME##_members(void *val);                               \


/*
 * The REGISTER_STRUCT family of macro functions serve as the primary way to
 * quickly make use of existing structures without creating custom functions
 * to copy and reconstitute the members of the structures between the two
 * worlds.
 *
 * There is a different REGISTER_STRUCT function call for each number of members
 * that a struct might have. For example, a struct with two members will be
 * registered with the SDFERRY_REGISTER_STRUCT3 call. The first argument to
 * these functions is the name of the struct that is being defined, without the
 * struct keyword. After this, there are three arguments for each member of the
 * struct:
 *
 *   The name of the member in the struct.
 *
 *   The type of the member in the struct. If this member is itself a struct
 *   pointer, then the name of the struct type can be used (again, without the
 *   struct keyword) provided that this struct will also be registered with
 *   SDFerry.
 *
 *   The name of the member of the struct that describes the size of this
 *   member. This parameter is only necessary for buffers. Other types can
 *   can provide the name of a member of the struct that can be cast to a
 *   uint32_t, and it will be ignored by the library.
 *
 * If the struct does not have any members that need the last parameter to this
 * function (which is used for raw buffers of data), then the NOBUFFER variant
 * of the registration function can be used, for example
 * SDFERRY_REGISTER_NOBUFFER_STRUCT3.
 *
 * Use of these macros is not the only means to enable the passing of structs
 * between the two worlds. The REGISTER_STRUCT macros create send and receive
 * functions for the struct with signatures that allows them to be used in the
 * following functions.
 * 
 *   TEEC_InvokeStructInCommand
 *   TEEC_InvokeStructOutCommand
 *   TEEC_InvokeStructInAndOutCommand
 *
 * If you wish to use these functions with a struct that cannot be registered
 * for some reason, then you will need to define your own versions of these
 * functions.The form and usage of these functions is described in the call
 * section of this documentation. If you do not need to define custom functions,
 * then it is sufficient to only understand the REGISTER_STRUCT workings along
 * with the functions mentioned above.
 */

#define SDFERRY_REGISTER_STRUCT(NAME, MEMBER1, TYPE1, SIZE_MEMBER1)            \
uint32_t __sdferry_send_##NAME(char *data, void *val, uint32_t buffer_size){   \
  struct NAME *thing;                                                          \
  (void)buffer_size;                                                           \
                                                                               \
  if(!data || !val){                                                           \
    return 0;                                                                  \
  }                                                                            \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  return __sdferry_send_##TYPE1(data, thing->MEMBER1, (uint32_t)thing->SIZE_MEMBER1); \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME(char *data, void *val){                      \
  struct NAME *thing;                                                          \
                                                                               \
  thing = *((struct NAME **)val);                                              \
                                                                               \
  thing->MEMBER1 = __sdferry_alloc_##TYPE1();                                  \
  return __sdferry_receive_##TYPE1(data, &(thing->MEMBER1));                   \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME##_struct(char *data, void *thing){           \
  return __sdferry_receive_##NAME(data, &thing);                               \
}                                                                              \
                                                                               \
void *__sdferry_alloc_##NAME(void){                                            \
  return __sdferry_alloc_mem(sizeof(struct NAME));                             \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME(void *val){                                         \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##NAME##_members(thing);                                      \
  __sdferry_free_mem(thing);                                                   \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME##_members(void *val){                               \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##TYPE1(thing->MEMBER1);                                      \
}

#define SDFERRY_REGISTER_NOBUFFER_STRUCT(NAME, MEMBER1, TYPE1)                 \
uint32_t __sdferry_send_##NAME(char *data, void *val, uint32_t buffer_size){   \
  struct NAME *thing;                                                          \
  (void)buffer_size;                                                           \
                                                                               \
  if(!data || !val){                                                           \
    return 0;                                                                  \
  }                                                                            \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  return __sdferry_send_##TYPE1(data, thing->MEMBER1, 0);                      \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME(char *data, void *val){                      \
  struct NAME *thing;                                                          \
                                                                               \
  thing = *((struct NAME **)val);                                              \
                                                                               \
  thing->MEMBER1 = __sdferry_alloc_##TYPE1();                                  \
  return __sdferry_receive_##TYPE1(data, &(thing->MEMBER1));                   \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME##_struct(char *data, void *thing){           \
  return __sdferry_receive_##NAME(data, &thing);                               \
}                                                                              \
                                                                               \
void *__sdferry_alloc_##NAME(void){                                            \
  return __sdferry_alloc_mem(sizeof(struct NAME));                             \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME(void *val){                                         \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##NAME##_members(thing);                                      \
  __sdferry_free_mem(thing);                                                   \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME##_members(void *val){                               \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##TYPE1(thing->MEMBER1);                                      \
}

#define SDFERRY_REGISTER_STRUCT2(NAME, MEMBER1, TYPE1, SIZE_MEMBER1, MEMBER2, TYPE2, SIZE_MEMBER2) \
uint32_t __sdferry_send_##NAME(char *data, void *val, uint32_t buffer_size){   \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
  (void)buffer_size;                                                           \
                                                                               \
  if(!data || !val){                                                           \
    return 0;                                                                  \
  }                                                                            \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  result_size = __sdferry_send_##TYPE1(data, thing->MEMBER1, (uint32_t)thing->SIZE_MEMBER1); \
  result_size += __sdferry_send_##TYPE2(data+result_size, thing->MEMBER2, (uint32_t)thing->SIZE_MEMBER2); \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME(char *data, void *val){                      \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
                                                                               \
  thing = *((struct NAME **)val);                                              \
                                                                               \
  thing->MEMBER1 = __sdferry_alloc_##TYPE1();                                  \
  result_size = __sdferry_receive_##TYPE1(data, &(thing->MEMBER1));            \
  thing->MEMBER2 = __sdferry_alloc_##TYPE2();                                  \
  result_size += __sdferry_receive_##TYPE2(data+result_size, &(thing->MEMBER2)); \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME##_struct(char *data, void *thing){           \
  return __sdferry_receive_##NAME(data, &thing);                               \
}                                                                              \
                                                                               \
void *__sdferry_alloc_##NAME(void){                                            \
  return __sdferry_alloc_mem(sizeof(struct NAME));                             \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME(void *val){                                         \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##NAME##_members(thing);                                      \
  __sdferry_free_mem(thing);                                                   \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME##_members(void *val){                               \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##TYPE2(thing->MEMBER2);                                      \
  __sdferry_free_##TYPE1(thing->MEMBER1);                                      \
}

#define SDFERRY_REGISTER_NOBUFFER_STRUCT2(NAME, MEMBER1, TYPE1, MEMBER2, TYPE2) \
uint32_t __sdferry_send_##NAME(char *data, void *val, uint32_t buffer_size){   \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
  (void)buffer_size;                                                           \
                                                                               \
  if(!data || !val){                                                           \
    return 0;                                                                  \
  }                                                                            \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  result_size = __sdferry_send_##TYPE1(data, thing->MEMBER1, 0);               \
  result_size += __sdferry_send_##TYPE2(data+result_size, thing->MEMBER2, 0);  \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME(char *data, void *val){                      \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
                                                                               \
  thing = *((struct NAME **)val);                                              \
                                                                               \
  thing->MEMBER1 = __sdferry_alloc_##TYPE1();                                  \
  result_size = __sdferry_receive_##TYPE1(data, &(thing->MEMBER1));            \
  thing->MEMBER2 = __sdferry_alloc_##TYPE2();                                  \
  result_size += __sdferry_receive_##TYPE2(data+result_size, &(thing->MEMBER2)); \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME##_struct(char *data, void *thing){           \
  return __sdferry_receive_##NAME(data, &thing);                               \
}                                                                              \
                                                                               \
void *__sdferry_alloc_##NAME(void){                                            \
  return __sdferry_alloc_mem(sizeof(struct NAME));                             \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME(void *val){                                         \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##NAME##_members(thing);                                      \
  __sdferry_free_mem(thing);                                                   \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME##_members(void *val){                               \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##TYPE2(thing->MEMBER2);                                      \
  __sdferry_free_##TYPE1(thing->MEMBER1);                                      \
}

#define SDFERRY_REGISTER_STRUCT3(NAME, MEMBER1, TYPE1, SIZE_MEMBER1, MEMBER2, TYPE2, SIZE_MEMBER2, MEMBER3, TYPE3, SIZE_MEMBER3) \
uint32_t __sdferry_send_##NAME(char *data, void *val, uint32_t buffer_size){   \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
  (void)buffer_size;                                                           \
                                                                               \
  if(!data || !val){                                                           \
    return 0;                                                                  \
  }                                                                            \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  result_size = __sdferry_send_##TYPE1(data, thing->MEMBER1, (uint32_t)thing->SIZE_MEMBER1); \
  result_size += __sdferry_send_##TYPE2(data+result_size, thing->MEMBER2, (uint32_t)thing->SIZE_MEMBER2); \
  result_size += __sdferry_send_##TYPE3(data+result_size, thing->MEMBER3, (uint32_t)thing->SIZE_MEMBER3); \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME(char *data, void *val){                      \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
                                                                               \
  thing = *((struct NAME **)val);                                              \
                                                                               \
  thing->MEMBER1 = __sdferry_alloc_##TYPE1();                                  \
  result_size = __sdferry_receive_##TYPE1(data, &(thing->MEMBER1));            \
  thing->MEMBER2 = __sdferry_alloc_##TYPE2();                                  \
  result_size += __sdferry_receive_##TYPE2(data+result_size, &(thing->MEMBER2)); \
  thing->MEMBER3 = __sdferry_alloc_##TYPE3();                                  \
  result_size += __sdferry_receive_##TYPE3(data+result_size, &(thing->MEMBER3)); \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME##_struct(char *data, void *thing){           \
  return __sdferry_receive_##NAME(data, &thing);                               \
}                                                                              \
                                                                               \
void *__sdferry_alloc_##NAME(void){                                            \
  return __sdferry_alloc_mem(sizeof(struct NAME));                             \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME(void *val){                                         \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##NAME##_members(thing);                                      \
  __sdferry_free_mem(thing);                                                   \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME##_members(void *val){                               \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##TYPE3(thing->MEMBER3);                                      \
  __sdferry_free_##TYPE2(thing->MEMBER2);                                      \
  __sdferry_free_##TYPE1(thing->MEMBER1);                                      \
}

#define SDFERRY_REGISTER_NOBUFFER_STRUCT3(NAME, MEMBER1, TYPE1, MEMBER2, TYPE2, MEMBER3, TYPE3) \
uint32_t __sdferry_send_##NAME(char *data, void *val, uint32_t buffer_size){   \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
  (void)buffer_size;                                                           \
                                                                               \
  if(!data || !val){                                                           \
    return 0;                                                                  \
  }                                                                            \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  result_size = __sdferry_send_##TYPE1(data, thing->MEMBER1, 0);               \
  result_size += __sdferry_send_##TYPE2(data+result_size, thing->MEMBER2, 0);  \
  result_size += __sdferry_send_##TYPE3(data+result_size, thing->MEMBER3, 0);  \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME(char *data, void *val){                      \
  uint32_t result_size;                                                        \
  struct NAME *thing;                                                          \
                                                                               \
  thing = *((struct NAME **)val);                                              \
                                                                               \
  thing->MEMBER1 = __sdferry_alloc_##TYPE1();                                  \
  result_size = __sdferry_receive_##TYPE1(data, &(thing->MEMBER1));            \
  thing->MEMBER2 = __sdferry_alloc_##TYPE2();                                  \
  result_size += __sdferry_receive_##TYPE2(data+result_size, &(thing->MEMBER2)); \
  thing->MEMBER3 = __sdferry_alloc_##TYPE3();                                  \
  result_size += __sdferry_receive_##TYPE3(data+result_size, &(thing->MEMBER3)); \
                                                                               \
  return result_size;                                                          \
}                                                                              \
                                                                               \
uint32_t __sdferry_receive_##NAME##_struct(char *data, void *thing){           \
  return __sdferry_receive_##NAME(data, &thing);                               \
}                                                                              \
                                                                               \
void *__sdferry_alloc_##NAME(void){                                            \
  return __sdferry_alloc_mem(sizeof(struct NAME));                             \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME(void *val){                                         \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##NAME##_members(thing);                                      \
  __sdferry_free_mem(thing);                                                   \
}                                                                              \
                                                                               \
void __sdferry_free_##NAME##_members(void *val){                               \
  struct NAME *thing;                                                          \
                                                                               \
  thing = (struct NAME *)val;                                                  \
                                                                               \
  __sdferry_free_##TYPE3(thing->MEMBER3);                                      \
  __sdferry_free_##TYPE2(thing->MEMBER2);                                      \
  __sdferry_free_##TYPE1(thing->MEMBER1);                                      \
}

/*
 * The SDFERRY_SEND_STRUCT and SDFERRY_RECEIVE_STRUCT functions can be used to
 * send and receive structs to and from a data buffer. These macros call the
 * defined functions, and should be used in favor of directly invoking the
 * functions so that the name mangling rules used by sdferry remain transparent
 * in the source code itself.
 */
#define SDFERRY_SEND_STRUCT(NAME, DATA, THING) __sdferry_send_##NAME(DATA, THING, 0)
#define SDFERRY_RECEIVE_STRUCT(NAME, DATA, THING) __sdferry_receive_##NAME##_struct(DATA, THING)

/*
 * The SDFERRY_FREE_STRUCT_MEMBERS function will free any dynamic allocations
 * made by sdferry during the reconstitution of a struct. This should be done
 * before a struct that was an output from an invocation is freed, so that the
 * underlying memory can also be cleaned up. Failing to do so will result in
 * memory leaks.
 */
#define SDFERRY_FREE_STRUCT_MEMBERS(NAME, THING) __sdferry_free_##NAME##_members(THING)

#endif /* __SDFERRY_REGISTER_H */
